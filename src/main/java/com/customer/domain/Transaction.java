package com.customer.domain;

import java.io.Serializable;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDate;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

@ApiModel("Transaction")
public class Transaction extends BaseTransaction implements Serializable {
	private static final long serialVersionUID = 1L;
	
	@ApiModelProperty(notes = "Autogenerated transaction id")
	private Long transactionId;
	
	@ApiModelProperty(notes = "reward points earned per that transaction")
	private Double rewardPointsEarned;
	
	public Transaction() {
	}

	public Transaction(Long transactionId, BaseTransaction baseTransaction) {
		super(baseTransaction.getCustomerId(), baseTransaction.getTransactionTotal(), baseTransaction.getTransactionDate());
		this.setTransactionId(transactionId);
	}
	
	public Transaction(Long transactionId, Long customerId, Double transactionTotal, LocalDate transactionDate) {
		super(customerId, transactionTotal, transactionDate);
		this.setTransactionId(transactionId);
	}

	public Long getTransactionId() {
		return transactionId;
	}

	public void setTransactionId(Long transactionId) {
		this.transactionId = transactionId;
		this.setRewardPointsEarned(calculateRewardPointsEarned());
	}
	
	public Double getRewardPointsEarned() {
		return this.rewardPointsEarned;
	}
	
	public void setRewardPointsEarned(Double rewardPointsEarned) {
		this.rewardPointsEarned = rewardPointsEarned;
	}
	
	public Double calculateRewardPointsEarned() {
		Double rewardPoints = 0.00;
		if (this.getTransactionTotal() != null) {
			if (this.getTransactionTotal() > 100) {
				rewardPoints = rewardPoints + ((this.getTransactionTotal() - 100) * 2);
				rewardPoints = rewardPoints + 50;
			} else if (this.getTransactionTotal() > 50 && this.getTransactionTotal() <= 100) {
				rewardPoints = rewardPoints + (this.getTransactionTotal() - 50);
			}
		}
		return new BigDecimal(rewardPoints).setScale(2, RoundingMode.HALF_UP).doubleValue();
	}
}
